package com.objetdirect.gwt.umldrawer.server.dao;import java.io.UnsupportedEncodingException;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.Collections;import java.util.List;import com.google.appengine.repackaged.org.apache.commons.codec.binary.Base64;import com.objetdirect.gwt.umlapi.server.dao.DriverAccessor;import com.objetdirect.gwt.umldrawer.client.beans.CheckItem;import com.objetdirect.gwt.umldrawer.client.beans.Comment;import com.objetdirect.gwt.umldrawer.client.beans.EditEvent;import com.objetdirect.gwt.umldrawer.client.beans.Exercise;import com.objetdirect.gwt.umldrawer.client.beans.OccurrenceReason;import com.objetdirect.gwt.umldrawer.client.beans.Reflection;import com.objetdirect.gwt.umldrawer.client.beans.Student;/**
 * @author J10-8011
 *
 */
public class Dao extends DriverAccessor{

	private Connection connection;
	public static final String UTF_8 = "UTF-8";	public static final String MS932 = "MS932";	public Dao(){
	}


	public Student getStudent(String studentId) {		Student student = new Student();		this.connection = this.createConnection();
		try{

			String sql = "select * from student where student_id = ?";

			PreparedStatement stmt = this.connection.prepareStatement(sql);

			stmt.setString(1, studentId);
			ResultSet rs = stmt.executeQuery();			if(rs.first()){				student.setStudentId(rs.getString("student_id"));				student.setPassword(rs.getString("password"));				student.setType(rs.getInt("type"));			}			else{				this.closeConnection(this.connection);				return null;			}

		}catch(SQLException e){
			this.closeConnection(this.connection);
			e.printStackTrace();			return null;

		} finally {
		}		this.closeConnection(this.connection);

		return student;
	}	public List<String> getUserList() {		this.connection= this.createConnection();		List<String> userList = new ArrayList<String>();		try{			String sql = "select * from student";			PreparedStatement stmt = this.connection.prepareStatement(sql);			ResultSet rs = stmt.executeQuery();			if(rs.first()){				do{					userList.add(rs.getString("student_id"));				}while(rs.next());			}		}catch(SQLException e){			this.closeConnection(connection);			e.printStackTrace();		} finally {		}		this.closeConnection(connection);		return userList;	}	public void saveCanvas(String studentId, int exercisesId, String canvasUrl) {		this.connection= this.createConnection();		try{			String sql = "select * from canvas where student_id=? and exercises_id=?";			PreparedStatement stmt = this.connection.prepareStatement(sql);			stmt.setString(1, studentId);			stmt.setInt(2, exercisesId);			ResultSet rs = stmt.executeQuery(sql);			if(rs.first()){				sql = "update canvas set canvas_url = ? where student_id = ? and  exercises_id = ?";				stmt = this.connection.prepareStatement(sql);				stmt.setString(1, canvasUrl);				stmt.setString(2, studentId);				stmt.setInt(3, exercisesId);				stmt.executeUpdate();				stmt.close();			}			else {				sql = "insert into canvas (student_id, exercises_id, canvas_url) values(?, ?, ?)";				stmt = this.connection.prepareStatement(sql);				stmt.setString(1, studentId);				stmt.setInt(2, exercisesId);				stmt.setString(3, canvasUrl);				stmt.executeUpdate();				stmt.close();			}			this.closeConnection(connection);		}catch(SQLException e){			this.closeConnection(connection);			e.printStackTrace();		} finally {		}		this.closeConnection(connection);	}	public EditEvent loadCanvas(String studentId, int exercisesId) {		this.connection = this.createConnection();		EditEvent lastEvent=new EditEvent();		try{			//	String sql = "select * from edit_event where student_id = ? and exercises_id = ? and canvas_url is not null order by edit_event_id desc";			String sql = "select * from edit_event where student_id = ? and exercises_id = ? and canvas_url is not null and edit_event_id = (select max(edit_event_id) from edit_event where student_id = ? and exercises_id = ? and canvas_url is not null)";			//from canvas table			//String sql = "select * from canvas where student_id = ' " + studentId+" ' and exercises_id = " + exercisesId ;			PreparedStatement stmt = this.connection.prepareStatement(sql);			System.out.println("loadCanvas:"+sql.toString());			stmt.setString(1, studentId);			stmt.setInt(2, exercisesId);			stmt.setString(3, studentId);			stmt.setInt(4, exercisesId);			ResultSet rs = stmt.executeQuery();			if(rs.first()){				lastEvent.setCanvasUrl(rs.getString("canvas_url"));				lastEvent.setUmlArtifactId(rs.getInt("umlartifact_id"));			}			else{				System.out.println("loadCanvas rs.first()=false");				this.closeConnection(this.connection);				return null;			}		}catch(SQLException e){			this.closeConnection(this.connection);			e.printStackTrace();			return null;		} finally {		}		this.closeConnection(this.connection);		return lastEvent;	}	public List<String> getEditEvent(String studentId ,int exercisesId) {		this.connection= this.createConnection();		List<String> log = new ArrayList<String>();		try{			String sql = "select * from edit_event where student_id = ? and exercises_id = ? and canvas_url is not  null order by edit_event_id";			PreparedStatement stmt = this.connection.prepareStatement(sql);			stmt.setString(1, studentId);			stmt.setInt(2, exercisesId);			ResultSet rs = stmt.executeQuery();			if(rs.first()){				do{				}while(rs.next());			}		}catch(SQLException e){			this.closeConnection(connection);			e.printStackTrace();		} finally {		}		this.closeConnection(connection);		return log;	}	//canvas_urlがnullでない編集イベントのリストをget	public List<EditEvent> getEditEventList(String studentId, int exercisesId) {		this.connection= this.createConnection();		List<EditEvent> log = new ArrayList<EditEvent>();		try{			String sql = "select * from edit_event where student_id = ? and exercises_id = ?  and canvas_url is not null order by edit_event_id";			PreparedStatement stmt = this.connection.prepareStatement(sql);			stmt.setString(1, studentId);			stmt.setInt(2, exercisesId);			ResultSet rs = stmt.executeQuery();			if(rs.first()){				do{					EditEvent EV = new EditEvent();					EV.setEditEventId(rs.getInt("edit_event_id"));					EV.setStudentId(rs.getString("student_id"));					EV.setExercisesId(rs.getInt("exercises_id"));					EV.setPreEditEventId(rs.getInt("pre_event_id"));					EV.setEditEvent(rs.getString("edit_event"));					EV.setEventType(rs.getString("event_type"));					EV.setTargetType(rs.getString("target_type"));					EV.setTargetId(rs.getInt("target_id"));					EV.setRightObjectId(rs.getInt("right_object_id"));					EV.setLeftObjectId(rs.getInt("left_object_id"));					EV.setTargetPart(rs.getString("target_part"));					EV.setBeforeEdit(rs.getString("before_edit"));					EV.setAfterEdit(rs.getString("after_edit"));					EV.setCanvasId(rs.getInt("canvas_id"));					EV.setCanvasUrl(rs.getString("canvas_url"));					EV.setDifficulty(rs.getInt("difficulty"));					EV.setEditDatetime(rs.getTimestamp("edit_datetime"));					log.add(EV);				}while(rs.next());			}		}catch(SQLException e){			this.closeConnection(connection);			e.printStackTrace();		} finally {		}		this.closeConnection(connection);		return log;	}	public EditEvent getEditEvent(int editEventId) {		this.connection= this.createConnection();		EditEvent EV = new EditEvent();		try{			String sql = "select * from edit_event where edit_event_id = ?";			PreparedStatement stmt = this.connection.prepareStatement(sql);			stmt.setInt(1, editEventId);			ResultSet rs = stmt.executeQuery();			if(rs.first()){				EV.setEditEventId(rs.getInt("edit_event_id"));				EV.setStudentId(rs.getString("student_id"));				EV.setExercisesId(rs.getInt("exercises_id"));				EV.setPreEditEventId(rs.getInt("pre_event_id"));				EV.setEditEvent(rs.getString("edit_event"));				EV.setEventType(rs.getString("event_type"));				EV.setTargetType(rs.getString("target_type"));				EV.setTargetId(rs.getInt("target_id"));				EV.setRightObjectId(rs.getInt("right_object_id"));				EV.setLeftObjectId(rs.getInt("left_object_id"));				EV.setTargetPart(rs.getString("target_part"));				EV.setBeforeEdit(rs.getString("before_edit"));				EV.setAfterEdit(rs.getString("after_edit"));				EV.setCanvasId(rs.getInt("canvas_id"));				EV.setCanvasUrl(rs.getString("canvas_url"));				EV.setDifficulty(rs.getInt("difficulty"));				EV.setEditDatetime(rs.getTimestamp("edit_datetime"));			}			else {				EV = null;			}		}catch(SQLException e){			this.closeConnection(connection);			e.printStackTrace();		} finally {		}		this.closeConnection(connection);		return EV;	}	public List<EditEvent> getAllEditEventList(String studentId, int exercisesId) {		this.connection= this.createConnection();		List<EditEvent> log = new ArrayList<EditEvent>();		try{			String sql = "select * from edit_event where student_id = ? and exercises_id = ?  order by edit_event_id";			PreparedStatement stmt = this.connection.prepareStatement(sql);			stmt.setString(1, studentId);			stmt.setInt(2, exercisesId);			ResultSet rs = stmt.executeQuery();			if(rs.first()){				do{					EditEvent EV = new EditEvent();					EV.setEditEventId(rs.getInt("edit_event_id"));					EV.setStudentId(rs.getString("student_id"));					EV.setExercisesId(rs.getInt("exercises_id"));					EV.setPreEditEventId(rs.getInt("pre_event_id"));					EV.setEditEvent(rs.getString("edit_event"));					EV.setEventType(rs.getString("event_type"));					EV.setTargetType(rs.getString("target_type"));					EV.setTargetId(rs.getInt("target_id"));					EV.setRightObjectId(rs.getInt("right_object_id"));					EV.setLeftObjectId(rs.getInt("left_object_id"));					EV.setTargetPart(rs.getString("target_part"));					EV.setBeforeEdit(rs.getString("before_edit"));					EV.setAfterEdit(rs.getString("after_edit"));					EV.setCanvasId(rs.getInt("canvas_id"));					EV.setCanvasUrl(rs.getString("canvas_url"));					EV.setDifficulty(rs.getInt("difficulty"));					EV.setEditDatetime(rs.getTimestamp("edit_datetime"));					log.add(EV);				}while(rs.next());			}		}catch(SQLException e){			this.closeConnection(connection);			e.printStackTrace();		} finally {		}		this.closeConnection(connection);		return log;	}	//Replay用のイベントリストをゲット	public List<EditEvent> getEditEventListForReplay(String studentId ,int exercisesId) {		this.connection= this.createConnection();		List<EditEvent> log = new ArrayList<EditEvent>();		try{			String sql = "select * from edit_event where student_id = ? and exercises_id = ? and ( ( event_type='Check') or ( event_type='Place' and edit_event ='PlaceArtifacts')  or ( event_type='RemoveArtifacts' and edit_event ='RemoveArtifacts') or canvas_url is not null ) order by edit_event_id";			PreparedStatement stmt = this.connection.prepareStatement(sql);			stmt.setString(1, studentId);			stmt.setInt(2, exercisesId);			ResultSet rs = stmt.executeQuery();			if(rs.first()){				do{					EditEvent EV = new EditEvent();					EV.setEditEventId(rs.getInt("edit_event_id"));					EV.setStudentId(rs.getString("student_id"));					EV.setExercisesId(rs.getInt("exercises_id"));					EV.setPreEditEventId(rs.getInt("pre_event_id"));					EV.setEditEvent(rs.getString("edit_event"));					EV.setEventType(rs.getString("event_type"));					EV.setTargetType(rs.getString("target_type"));					EV.setTargetId(rs.getInt("target_id"));					EV.setRightObjectId(rs.getInt("right_object_id"));					EV.setLeftObjectId(rs.getInt("left_object_id"));					EV.setTargetPart(rs.getString("target_part"));					EV.setBeforeEdit(rs.getString("before_edit"));					EV.setAfterEdit(rs.getString("after_edit"));					EV.setCanvasId(rs.getInt("canvas_id"));					EV.setCanvasUrl(rs.getString("canvas_url"));					EV.setDifficulty(rs.getInt("difficulty"));					EV.setEditDatetime(rs.getTimestamp("edit_datetime"));					log.add(EV);				}while(rs.next());			}		}catch(SQLException e){			this.closeConnection(connection);			e.printStackTrace();		} finally {		}		this.closeConnection(connection);		return log;	}	public void setDifficulty(int editEventId, int difficulty) {		this.connection = this.createConnection();		try{			String sql = "update edit_event set difficulty = ? ,edit_datetime=edit_datetime where edit_event_id = ?";			PreparedStatement stmt = this.connection.prepareStatement(sql);			stmt.setInt(1, difficulty);			stmt.setInt(2, editEventId);			stmt.executeUpdate();			this.closeConnection(connection);		}catch(SQLException e){			this.closeConnection(connection);			e.printStackTrace();		}	}	public void addUser(String userId, String password) {		this.connection = this.createConnection();		try{			String sql = "insert into student (student_id,password,type) values(?,?,?)";			PreparedStatement stmt = this.connection.prepareStatement(sql);			stmt.setString(1, userId);			stmt.setString(2, password);			stmt.setInt(3, 0);			stmt.executeUpdate();			this.closeConnection(connection);		}catch(SQLException e){			this.closeConnection(connection);			e.printStackTrace();		}	}	public void changePassword(String studentId, String password) {		this.connection = this.createConnection();		try{			String sql = "update student set password = ? where student_id = ?";			PreparedStatement stmt = this.connection.prepareStatement(sql);			stmt.setString(1, password);			stmt.setString(2, studentId);			stmt.executeUpdate();			this.closeConnection(connection);		}catch(SQLException e){			this.closeConnection(connection);			e.printStackTrace();		}	}	public List<EditEvent> getAllEditEventListDecoded(String studentId,			int exerciseId) throws UnsupportedEncodingException {		this.connection= this.createConnection();		List<EditEvent> log = new ArrayList<EditEvent>();		try{			String sql = "select * from edit_event where student_id = ? and exercises_id = ?  order by edit_event_id";			PreparedStatement stmt = this.connection.prepareStatement(sql);			stmt.setString(1, studentId);			stmt.setInt(2, exerciseId);			ResultSet rs = stmt.executeQuery();			if(rs.first()){				do{					EditEvent EV = new EditEvent();					EV.setEditEventId(rs.getInt("edit_event_id"));					EV.setStudentId(rs.getString("student_id"));					EV.setExercisesId(rs.getInt("exercises_id"));					EV.setPreEditEventId(rs.getInt("pre_event_id"));					EV.setEditEvent(rs.getString("edit_event"));					EV.setEventType(rs.getString("event_type"));					EV.setTargetType(rs.getString("target_type"));					EV.setTargetId(rs.getInt("target_id"));					EV.setRightObjectId(rs.getInt("right_object_id"));					EV.setLeftObjectId(rs.getInt("left_object_id"));					EV.setTargetPart(rs.getString("target_part"));					EV.setBeforeEdit(rs.getString("before_edit"));					EV.setAfterEdit(rs.getString("after_edit"));					EV.setCanvasId(rs.getInt("canvas_id"));					EV.setCanvasUrl(base64ToString(rs.getString("canvas_url")) );					EV.setDifficulty(rs.getInt("difficulty"));					EV.setEditDatetime(rs.getTimestamp("edit_datetime"));					log.add(EV);				}while(rs.next());			}		}catch(SQLException e){			this.closeConnection(connection);			e.printStackTrace();		} finally {		}		this.closeConnection(connection);		return log;	}	private byte[] stringToBytes(String str) {		try {			//String -> byte[]			byte [] bytes = str.getBytes("UTF-8");  //String.getBytes();    or      String.getBytes(encoding);			//byte [] -> String			String xx = new String(bytes, "UTF-8"); //			return bytes;		} catch (UnsupportedEncodingException e) {			// TODO 自動生成された catch ブロック			e.printStackTrace();			return null;		}	}	private String base64ToString(String base64){		String decodedString=null;		if(base64!=null){			byte[] bytes = stringToBytes(base64);			byte[] decoded = Base64.decodeBase64(bytes);			try {				decodedString = new String(decoded, "UTF-8");			} catch (UnsupportedEncodingException e) {				e.printStackTrace();				return null;			}		}		return decodedString;	}	public EditEvent undo(String studentId, int exercisesId) {		this.connection= this.createConnection();		EditEvent backEvent = new EditEvent();		int editEventId=0;		try{			String sql = "select max(edit_event_id) from edit_event "					+ "where student_id = ? and exercises_id = ?"					+ " and ( ( event_type='Create' and canvas_url is not null) or ( event_type='Place' and edit_event ='PlaceArtifacts')  or ( event_type='RemoveArtifacts') or ( event_type='Edit') or ( event_type='Undo') )"					+ "and canvas_url is not null";			PreparedStatement stmt = this.connection.prepareStatement(sql);			stmt.setString(1, studentId);			stmt.setInt(2, exercisesId);			ResultSet rs = stmt.executeQuery();			if(rs.first()){				editEventId= rs.getInt("max(edit_event_id)");				System.out.println("max(edit_event_id)="+editEventId);			}		}catch(SQLException e){			this.closeConnection(connection);			e.printStackTrace();		} finally {		}		backEvent.setEventType("NONE");;		do{			if(backEvent.getEventType().equals("Undo")){				editEventId = Integer.parseInt(backEvent.getEditEvent());			}			try{				String sql = "select * from edit_event where edit_event_id =("						+ "select max(edit_event_id) from edit_event where student_id = ? and exercises_id = ?"						+ " and (  (event_type='Start') or ( event_type='Create' and canvas_url is not null) or ( event_type='Place' and edit_event ='PlaceArtifacts')  or ( event_type='RemoveArtifacts') or ( event_type='Edit') or ( event_type='Undo') ) "						+ " and canvas_url is not null and edit_event_id <= ?"						+ ")";				PreparedStatement stmt = this.connection.prepareStatement(sql);				stmt.setString(1, studentId);				stmt.setInt(2, exercisesId);				stmt.setInt(3, editEventId);				ResultSet rs = stmt.executeQuery();				if(rs.first()){					backEvent.setEditEventId(rs.getInt("edit_event_id"));					backEvent.setStudentId(rs.getString("student_id"));					backEvent.setExercisesId(rs.getInt("exercises_id"));					backEvent.setPreEditEventId(rs.getInt("pre_event_id"));					backEvent.setEditEvent(rs.getString("edit_event"));					backEvent.setEventType(rs.getString("event_type"));					backEvent.setTargetType(rs.getString("target_type"));					backEvent.setTargetId(rs.getInt("target_id"));					backEvent.setRightObjectId(rs.getInt("right_object_id"));					backEvent.setLeftObjectId(rs.getInt("left_object_id"));					backEvent.setTargetPart(rs.getString("target_part"));					backEvent.setBeforeEdit(rs.getString("before_edit"));					backEvent.setAfterEdit(rs.getString("after_edit"));					backEvent.setCanvasId(rs.getInt("canvas_id"));					backEvent.setCanvasUrl(rs.getString("canvas_url"));					backEvent.setDifficulty(rs.getInt("difficulty"));					backEvent.setEditDatetime(rs.getTimestamp("edit_datetime"));					System.out.println("id="+backEvent.getEditEventId());					System.out.println("url="+backEvent.getCanvasUrl());				}			}catch(SQLException e){				//this.closeConnection(connection);				e.printStackTrace();			} finally {			}		}while ( backEvent.getEventType().equals("Undo") );		editEventId=backEvent.getEditEventId()-1;		try{			String sql = "select * from edit_event where edit_event_id =("					+ "select max(edit_event_id) from edit_event where student_id = ? and exercises_id = ?"					+ " and ( (event_type='Start') or ( event_type='Create' and canvas_url is not null) or  ( event_type='Place' and edit_event ='PlaceArtifacts')  or ( event_type='RemoveArtifacts') or ( event_type='Edit') or ( event_type='Undo')) "					+ " and canvas_url is not null and edit_event_id <= ?"					+ ")";			PreparedStatement stmt = this.connection.prepareStatement(sql);			stmt.setString(1, studentId);			stmt.setInt(2, exercisesId);			stmt.setInt(3, editEventId);			ResultSet rs = stmt.executeQuery();			if(rs.first()){				backEvent.setEditEventId(rs.getInt("edit_event_id"));				backEvent.setStudentId(rs.getString("student_id"));				backEvent.setExercisesId(rs.getInt("exercises_id"));				backEvent.setPreEditEventId(rs.getInt("pre_event_id"));				backEvent.setEditEvent(rs.getString("edit_event"));				backEvent.setEventType(rs.getString("event_type"));				backEvent.setTargetType(rs.getString("target_type"));				backEvent.setTargetId(rs.getInt("target_id"));				backEvent.setRightObjectId(rs.getInt("right_object_id"));				backEvent.setLeftObjectId(rs.getInt("left_object_id"));				backEvent.setTargetPart(rs.getString("target_part"));				backEvent.setBeforeEdit(rs.getString("before_edit"));				backEvent.setAfterEdit(rs.getString("after_edit"));				backEvent.setCanvasId(rs.getInt("canvas_id"));				backEvent.setCanvasUrl(rs.getString("canvas_url"));				backEvent.setDifficulty(rs.getInt("difficulty"));				backEvent.setEditDatetime(rs.getTimestamp("edit_datetime"));				System.out.println("id="+backEvent.getEditEventId());				System.out.println("url="+backEvent.getCanvasUrl());			}		}catch(SQLException e){			//this.closeConnection(connection);			e.printStackTrace();		} finally {		}		if(backEvent.getEventType().equals("Undo")){			try{				String sql = "select * from edit_event where edit_event_id =?";				PreparedStatement stmt = this.connection.prepareStatement(sql);				stmt.setInt(1, Integer.parseInt(backEvent.getEditEvent()));				ResultSet rs = stmt.executeQuery();				if(rs.first()){					backEvent.setEditEventId(rs.getInt("edit_event_id"));					backEvent.setStudentId(rs.getString("student_id"));					backEvent.setExercisesId(rs.getInt("exercises_id"));					backEvent.setPreEditEventId(rs.getInt("pre_event_id"));					backEvent.setEditEvent(rs.getString("edit_event"));					backEvent.setEventType(rs.getString("event_type"));					backEvent.setTargetType(rs.getString("target_type"));					backEvent.setTargetId(rs.getInt("target_id"));					backEvent.setRightObjectId(rs.getInt("right_object_id"));					backEvent.setLeftObjectId(rs.getInt("left_object_id"));					backEvent.setTargetPart(rs.getString("target_part"));					backEvent.setBeforeEdit(rs.getString("before_edit"));					backEvent.setAfterEdit(rs.getString("after_edit"));					backEvent.setCanvasId(rs.getInt("canvas_id"));					backEvent.setCanvasUrl(rs.getString("canvas_url"));					backEvent.setDifficulty(rs.getInt("difficulty"));					backEvent.setEditDatetime(rs.getTimestamp("edit_datetime"));				}			}catch(SQLException e){				//this.closeConnection(connection);				e.printStackTrace();			} finally {			}		}		if(backEvent.getEventType().equals("Start")){			return null;		}		this.closeConnection(connection);		return backEvent;	}	public boolean saveCanvasAsAnswer(String studentId, int exerciseId, String canvasUrl) {		boolean flag = true; //for return		this.connection= this.createConnection();		try{			String sql = "select * from answer where exercise_id = ?";			PreparedStatement stmt = this.connection.prepareStatement(sql);			stmt.setInt(1, exerciseId);			ResultSet rs = stmt.executeQuery();			if(rs.first()){				sql = "update answer set canvas_url = ?, student_id = ? , entry_datetime = now() where exercise_id = ?";				stmt = this.connection.prepareStatement(sql);				stmt.setString(1, canvasUrl);				stmt.setString(2, studentId);				stmt.setInt(3, exerciseId);				stmt.executeUpdate();				stmt.close();			}			else {				sql = "insert into answer (student_id, exercise_id, canvas_url, entry_datetime) values(?, ?, ?, now() )";				stmt = this.connection.prepareStatement(sql);				stmt.setString(1, studentId);				stmt.setInt(2, exerciseId);				stmt.setString(3, canvasUrl);				stmt.executeUpdate();				stmt.close();			}			this.closeConnection(connection);		}catch(SQLException e){			this.closeConnection(connection);			e.printStackTrace();			flag = false;		} finally {		}		this.closeConnection(connection);		return flag;	}	public String getAnswer(int exerciseId) {		String canvasUrl = null;		this.connection= this.createConnection();		try{			String sql = "select * from answer where exercise_id = ?";			PreparedStatement stmt = this.connection.prepareStatement(sql);			stmt.setInt(1, exerciseId);			ResultSet rs = stmt.executeQuery();			if(rs.first()){				canvasUrl = rs.getString("canvas_url");			}			stmt.close();			this.closeConnection(connection);		}catch(SQLException e){			this.closeConnection(connection);			e.printStackTrace();		} finally {		}		this.closeConnection(connection);		return canvasUrl;	}	public boolean addExercise( String type, String title, String task ){		this.connection = this.createConnection();		try{			String sql = "insert into exercise (type, title ,task, entry_datetime, is_removed) values(?,?,?,now(), 0)";			PreparedStatement stmt = this.connection.prepareStatement(sql);			stmt.setString(1, type);			stmt.setString(2, title);			stmt.setString(3, task);			stmt.executeUpdate();			this.closeConnection(connection);		}catch(SQLException e){			this.closeConnection(connection);			e.printStackTrace();			return false;		}		return true;	}	public List<Exercise> getExerciseList(String type) {		this.connection= this.createConnection();		List<Exercise> exerciseList = new ArrayList<Exercise>();		try{			String sql = "select * from exercise where type = ?";			PreparedStatement stmt = this.connection.prepareStatement(sql);			stmt.setString(1, type);			ResultSet rs = stmt.executeQuery();			if(rs.first()){				do{					Exercise ex = new Exercise();					ex.setExerciseId( rs.getInt("exercise_id"));					ex.setType( rs.getString("type"));					ex.setTitle( rs.getString("title"));					ex.setTask( rs.getString("task"));					ex.setEntryDatetime( rs.getDate("entry_datetime"));					ex.setIsRemoved( rs.getInt("is_removed"));					exerciseList.add(ex);				}while(rs.next());			}		}catch(SQLException e){			this.closeConnection(connection);			e.printStackTrace();		} finally {		}		this.closeConnection(connection);		return exerciseList;	}	public Exercise getExercise(int exerciseId) {		this.connection= this.createConnection();		Exercise ex = new Exercise();		try{			String sql = "select * from exercise where exercise_id = ?";			PreparedStatement stmt = this.connection.prepareStatement(sql);			stmt.setInt(1, exerciseId);			ResultSet rs = stmt.executeQuery();			if(rs.first()){				ex.setExerciseId( rs.getInt("exercise_id"));				ex.setType( rs.getString("type"));				ex.setTitle( rs.getString("title"));				ex.setTask( rs.getString("task"));				ex.setEntryDatetime( rs.getDate("entry_datetime"));				ex.setIsRemoved( rs.getInt("is_removed"));			}			else{				return null;			}		}catch(SQLException e){			this.closeConnection(connection);			e.printStackTrace();		} finally {		}		this.closeConnection(connection);		return ex;	}	public Comment addComment(int editEventId, String studentId, int exerciseId, String comment) {		this.connection= this.createConnection();		Comment newComment = new Comment();		ResultSet rs ;		try{			String sql = "select * from comment where edit_event_id=?";			PreparedStatement stmt = this.connection.prepareStatement(sql);			stmt.setInt(1, editEventId);			rs = stmt.executeQuery();			if(rs.first()){				int commentId = rs.getInt("comment_id");				sql = "update comment set comment = ? where comment_id = ?";				stmt = this.connection.prepareStatement(sql);				stmt.setString(1, comment);				stmt.setInt(2, commentId);				stmt.executeUpdate();				stmt.close();			}			else {				sql = "insert into comment (edit_event_id, student_id, exercise_id, comment, entry_datetime ) values(?, ?, ?, ?, now())";				stmt = this.connection.prepareStatement(sql);				stmt.setInt(1, editEventId);				stmt.setString(2, studentId);				stmt.setInt(3, exerciseId);				stmt.setString(4, comment);				stmt.executeUpdate();				stmt.close();			}			sql = "select * from comment where comment_id = (select max(comment_id) from comment where edit_event_id = ?)";			stmt = this.connection.prepareStatement(sql);			stmt.setInt(1, editEventId);			rs = stmt.executeQuery();			rs.first();			newComment.setCommentId( rs.getInt("comment_id") );			newComment.setEditEventId( rs.getInt("edit_event_id") );			newComment.setStudentId( rs.getString("student_id") );			newComment.setExerciseId( rs.getInt("exercise_id") );			newComment.setComment( rs.getString("comment") );			newComment.setEntryDatetime( rs.getDate("entry_datetime") );			this.closeConnection(connection);		}catch(SQLException e){			this.closeConnection(connection);			e.printStackTrace();			return null;		} finally {		}		this.closeConnection(connection);		return newComment;	}	public List<Comment> getCommentList(String studentId, int exerciseId) {		this.connection= this.createConnection();		List<Comment> commentList = new ArrayList<Comment>();		try{			String sql = "select * from comment where student_id = ? and exercise_id = ? order by edit_event_id";			PreparedStatement stmt = this.connection.prepareStatement(sql);			stmt.setString(1, studentId);			stmt.setInt(2, exerciseId);			ResultSet rs = stmt.executeQuery();			while(rs.next()){				Comment comment = new Comment();				comment.setCommentId( rs.getInt("comment_id") );				comment.setEditEventId( rs.getInt("edit_event_id") );				comment.setStudentId( rs.getString("student_id") );				comment.setExerciseId( rs.getInt("exercise_id") );				comment.setComment( rs.getString("comment") );				comment.setEntryDatetime( rs.getDate("entry_datetime") );				commentList.add(comment);			}		}catch(SQLException e){			this.closeConnection(connection);			e.printStackTrace();		} finally {		}		this.closeConnection(connection);		return commentList;	}	public List<Reflection> getReflectionList(String studentId, int exerciseId) {		this.connection= this.createConnection();		List<Reflection> reflectionList = new ArrayList<Reflection>();		try{			String sql = "select * from reflection where student_id = ? and exercise_id = ? order by occurrence_point_id";			PreparedStatement stmt = this.connection.prepareStatement(sql);			stmt.setString(1, studentId);			stmt.setInt(2, exerciseId);			ResultSet rs = stmt.executeQuery();			if(rs.first()){				do{					Reflection rf = new Reflection();					rf.setReflectionId( rs.getInt("reflection_id"));					rf.setStudentId( rs.getString("student_id"));					rf.setExerciseId( rs.getInt("exercise_id"));					rf.setOccurrencePoint( getEditEvent( rs.getInt("occurrence_point_id") ) );					rf.setOtherReason( rs.getString("occurrence_reason"));					rf.setTargetPartIdList(stringToList( rs.getString("target_part")));					rf.setImagedSituation( rs.getString("imaged_situation"));					rf.setIsThereProblem( rs.getBoolean("is_there_problem"));					rf.setDiscoveredProblems( rs.getString("discovered_problem"));					rf.setEntryDatetime( rs.getTimestamp("entry_datetime"));					reflectionList.add(rf);				}while(rs.next());			}		}catch(SQLException e){			this.closeConnection(connection);			e.printStackTrace();		} finally {		}		this.closeConnection(connection);		return reflectionList;	}	public List<OccurrenceReason> getOccurrenceReasonList(int reflectionId) {		this.connection= this.createConnection();		List<Integer> ORIdList = new ArrayList<Integer>();		List<OccurrenceReason> ORList = new ArrayList<OccurrenceReason>();		try{			String sql = "select * from reflection_reason where reflection_id = ?";			PreparedStatement stmt = this.connection.prepareStatement(sql);			stmt.setInt(1, reflectionId);			ResultSet rs = stmt.executeQuery();			if(rs.first()){				do{					ORIdList.add( rs.getInt("occurrence_reason_id") );				}while(rs.next());				for(int id : ORIdList){					sql = "select * from occurrence_reason where occurrence_reason_id = ?";					stmt = this.connection.prepareStatement(sql);					stmt.setInt(1, id);					rs = stmt.executeQuery();					if(rs.first()){						do{							OccurrenceReason or = new OccurrenceReason();							or.setReasonId(rs.getInt("occurrence_reason_id"));							or.setReason(rs.getString("occurrence_reason"));							ORList.add(or);						}while(rs.next());					}				}			}		}catch(SQLException e){			this.closeConnection(connection);			e.printStackTrace();		} finally {		}		this.closeConnection(connection);		return ORList;	}	public List<CheckItem> getCheckItemList(int reflectionId) {		this.connection= this.createConnection();		List<Integer> CIIdList = new ArrayList<Integer>();		List<CheckItem> CIList = new ArrayList<CheckItem>();		try{			String sql = "select * from reflection_check_item where reflection_id = ?";			PreparedStatement stmt = this.connection.prepareStatement(sql);			stmt.setInt(1, reflectionId);			ResultSet rs = stmt.executeQuery();			if(rs.first()){				do{					CIIdList.add( rs.getInt("check_item_id") );				}while(rs.next());				for(int id : CIIdList){					sql = "select * from check_item where check_item_id = ?";					stmt = this.connection.prepareStatement(sql);					stmt.setInt(1, id);					rs = stmt.executeQuery();					if(rs.first()){						do{							CheckItem ci = new CheckItem();							ci.setCheckItemId(rs.getInt("check_item_id"));							ci.setCheckItem(rs.getString("check_item"));							CIList.add(ci);						}while(rs.next());					}				}			}		}catch(SQLException e){			this.closeConnection(connection);			e.printStackTrace();		} finally {		}		this.closeConnection(connection);		return CIList;	}	public List<EditEvent> getModificationEventList(int reflectionId) {		this.connection= this.createConnection();		List<Integer> EIdList = new ArrayList<Integer>();		List<EditEvent> EList = new ArrayList<EditEvent>();		try{			String sql = "select * from modification_event where reflection_id = ?";			PreparedStatement stmt = this.connection.prepareStatement(sql);			stmt.setInt(1, reflectionId);			ResultSet rs = stmt.executeQuery();			if(rs.first()){				do{					EIdList.add( rs.getInt("edit_event_id") );				}while(rs.next());				for(int id : EIdList){					EList.add( this.getEditEvent(id) );				}			}		}catch(SQLException e){			this.closeConnection(connection);			e.printStackTrace();		} finally {		}		this.closeConnection(connection);		return EList;	}	public Reflection addReflection(Reflection newReflection) {		this.connection= this.createConnection();		ResultSet rs ;		try{			System.out.println("Dao newReflection.id="+newReflection.getReflectionId());			String sql = "select * from reflection where reflection_id = ?";			PreparedStatement stmt = this.connection.prepareStatement(sql);			stmt.setInt(1, newReflection.getReflectionId());			rs = stmt.executeQuery();			if(rs.first()){				int reflectionId = rs.getInt("reflection_id");				sql = "update reflection set occurrence_reason = ? , target_part = ? , imaged_situation = ? , is_there_problem = ? , discovered_problem = ? , entry_datetime = now()  where reflection_id = ?";				stmt = this.connection.prepareStatement(sql);				stmt.setString(1, newReflection.getOtherReason());				stmt.setString(2, listToString(newReflection.getTargetPartIdList()  )   );//				stmt.setString(3, newReflection.getImagedSituation());				stmt.setBoolean(4, newReflection.isThereProblem());				stmt.setString(5, newReflection.getDiscoveredProblems());				stmt.setInt(6, reflectionId);				stmt.executeUpdate();				stmt.close();			}			else {				sql = "insert into reflection (student_id, exercise_id, occurrence_point_id, occurrence_reason, target_part, imaged_situation, is_there_problem, discovered_problem, entry_datetime ) "						+ "values(?, ?, ?, ?, ?, ?, ?, ?, now())";				stmt = this.connection.prepareStatement(sql);				stmt.setString(1, newReflection.getStudentId());				stmt.setInt(2, newReflection.getExerciseId());				stmt.setInt(3, newReflection.getOccurrencePoint().getEditEventId());				stmt.setString(4, newReflection.getOtherReason());				stmt.setString(5,  listToString( newReflection.getTargetPartIdList() ) );//				stmt.setString(6, newReflection.getImagedSituation());				stmt.setBoolean(7, newReflection.isThereProblem());				stmt.setString(8, newReflection.getDiscoveredProblems());				stmt.executeUpdate();				stmt.close();				sql = "select * from reflection where reflection_id = (select max(reflection_id) from reflection where student_id = ? and exercise_id = ?)";				stmt = this.connection.prepareStatement(sql);				stmt.setString(1, newReflection.getStudentId());				stmt.setInt(2, newReflection.getExerciseId());				rs = stmt.executeQuery();				rs.first();				newReflection.setReflectionId( rs.getInt("reflection_id") );				newReflection.setEntryDatetime( rs.getTimestamp("entry_datetime") );				stmt.close();			}			stmt.close();			this.closeConnection(connection);		}catch(SQLException e){			this.closeConnection(connection);			e.printStackTrace();			return null;		} finally {		}		this.closeConnection(connection);		return newReflection;	}	public boolean removeReflection(Reflection reflection) {		this.connection= this.createConnection();		try{			String sql = "delete from reflection where reflection_id = ?";			PreparedStatement stmt = this.connection.prepareStatement(sql);			stmt.setInt(1, reflection.getReflectionId());			stmt.executeUpdate();			sql = "delete from reflection_reason where reflection_id = ?";			stmt = this.connection.prepareStatement(sql);			stmt.setInt(1, reflection.getReflectionId());			stmt.executeUpdate();			sql = "delete from reflection_check_item where reflection_id = ?";			stmt = this.connection.prepareStatement(sql);			stmt.setInt(1, reflection.getReflectionId());			stmt.executeUpdate();			stmt.close();			this.closeConnection(connection);		}catch(SQLException e){			this.closeConnection(connection);			e.printStackTrace();			return false;		} finally {		}		this.closeConnection(connection);		return true;	}	//OccurrenceReason	public void addOccurrenceReason(Reflection reflection){		this.connection= this.createConnection();		List<OccurrenceReason> reasonList = reflection.getReasonList();		try{			String sql = "delete from reflection_reason where reflection_id=?";			PreparedStatement stmt = this.connection.prepareStatement(sql);			stmt.setInt(1, reflection.getReflectionId());			stmt.executeUpdate();			for(OccurrenceReason or  : reasonList){				sql = "insert into reflection_reason (reflection_id, occurrence_reason_id ) values(?, ?)";				stmt = this.connection.prepareStatement(sql);				stmt.setInt(1, reflection.getReflectionId());				stmt.setInt(2, or.getReasonId());				stmt.executeUpdate();			}			stmt.close();			this.closeConnection(connection);		}catch(SQLException e){			this.closeConnection(connection);			e.printStackTrace();		} finally {		}		this.closeConnection(connection);	}	//checkItem	public void addCheckItem(Reflection reflection){		this.connection= this.createConnection();		List<CheckItem>checkItemList = reflection.getCheckedItemList();		try{			String sql = "delete from reflection_check_item where reflection_id=?";			PreparedStatement stmt = this.connection.prepareStatement(sql);			stmt.setInt(1, reflection.getReflectionId());			stmt.executeUpdate();			for(CheckItem ci  : checkItemList){				sql = "insert into reflection_check_item (reflection_id, check_item_id ) values(?, ?)";				stmt = this.connection.prepareStatement(sql);				stmt.setInt(1, reflection.getReflectionId());				stmt.setInt(2, ci.getCheckItemId());				stmt.executeUpdate();			}			stmt.close();			this.closeConnection(connection);		}catch(SQLException e){			this.closeConnection(connection);			e.printStackTrace();		} finally {		}		this.closeConnection(connection);	}	public List<Integer> stringToList(String str) {		String[] tmp = str.split(",");		List<Integer> ans = new ArrayList<Integer>();		for(int i=0 ; i<tmp.length ; i++){			if(tmp[i].equals("")) break;			ans.add( Integer.parseInt(tmp[i]) );		}		return ans;	}	public String listToString(List<Integer> list) {		StringBuilder sb = new StringBuilder();		for( int id : list){			sb.append(Integer.toString(id)+",");		}		sb.toString();		return sb.toString();	}	public void addModificationEvent(Reflection newReflection) {		this.connection= this.createConnection();		List<EditEvent>modificationEventList = newReflection.getModificationEventList();		try{			String sql = "delete from modification_event where reflection_id=?";			PreparedStatement stmt = this.connection.prepareStatement(sql);			stmt.setInt(1, newReflection.getReflectionId());			stmt.executeUpdate();			for(EditEvent ev  : modificationEventList){				sql = "insert into modification_event (reflection_id, edit_event_id ) values(?, ?)";				stmt = this.connection.prepareStatement(sql);				stmt.setInt(1, newReflection.getReflectionId());				stmt.setInt(2, ev.getEditEventId());				stmt.executeUpdate();			}			stmt.close();			this.closeConnection(connection);		}catch(SQLException e){			this.closeConnection(connection);			e.printStackTrace();		} finally {		}		this.closeConnection(connection);	}	public List<OccurrenceReason> getAllOccurrenceReasonList() {		this.connection= this.createConnection();		List<OccurrenceReason> ORList = new ArrayList<OccurrenceReason>();		try{			String sql = "select * from occurrence_reason";			PreparedStatement stmt = this.connection.prepareStatement(sql);			ResultSet rs = stmt.executeQuery();			if(rs.first()){				do{					OccurrenceReason or = new OccurrenceReason();					or.setReasonId(rs.getInt("occurrence_reason_id"));					or.setReason(rs.getString("occurrence_reason"));					ORList.add(or);				}while(rs.next());			}		}catch(SQLException e){			this.closeConnection(connection);			e.printStackTrace();		} finally {		}		this.closeConnection(connection);		return ORList;	}	public List<CheckItem> getAllCheckItemList() {		this.connection= this.createConnection();		List<CheckItem> CIList = new ArrayList<CheckItem>();		try{			String sql = "select * from check_item";			PreparedStatement stmt = this.connection.prepareStatement(sql);			ResultSet rs = stmt.executeQuery();			if(rs.first()){				do{					CheckItem ci = new CheckItem();					ci.setCheckItemId(rs.getInt("check_item_id"));					ci.setCheckItem(rs.getString("check_item"));					CIList.add(ci);				}while(rs.next());			}		}catch(SQLException e){			this.closeConnection(connection);			e.printStackTrace();		} finally {		}		this.closeConnection(connection);		return CIList;	}	public List<Student> getUserListForReplay(int exerciseId) {		this.connection= this.createConnection();		List<Student> userList = new ArrayList<Student>();		try{			String sql = "select * from student";			PreparedStatement stmt = this.connection.prepareStatement(sql);			ResultSet rs = stmt.executeQuery();			if(rs.first()){				do{					Student s = new Student();					s.setStudentId( rs.getString("student_id") );					s.setPassword( rs.getString("password") );					s.setType( rs.getInt("type") );					userList.add(s);				}while(rs.next());			}			for(int i=0 ; i<userList.size(); i++){				sql = "select * from edit_event where student_id = ? and exercises_id = ?";				stmt = this.connection.prepareStatement(sql);				stmt.setString( 1, userList.get(i).getStudentId() );				stmt.setInt( 2, exerciseId );				rs = stmt.executeQuery();				if(!rs.first()){					userList.set(i, null);				}			}			userList.removeAll(Collections.singleton(null));		}catch(SQLException e){			this.closeConnection(connection);			e.printStackTrace();		} finally {		}		this.closeConnection(connection);		return userList;	}	public boolean setAdmin(String text, boolean isAdmin) {		this.connection= this.createConnection();		ResultSet rs ;		boolean r;		try{			String sql = "select * from student where student_id=?";			PreparedStatement stmt = this.connection.prepareStatement(sql);			stmt.setString(1, text);			rs = stmt.executeQuery();			if(rs.first()){				sql = "update student set type = ? where student_id = ?";				stmt = this.connection.prepareStatement(sql);				stmt.setBoolean(1, isAdmin);				stmt.setString(2, text);				stmt.executeUpdate();				stmt.close();				r = true;			}			else {				r = false;			}		}catch(SQLException e){			this.closeConnection(connection);			e.printStackTrace();			r =  false;		} finally {		}		this.closeConnection(connection);		return r;	}	public void updateCheckItem(List<CheckItem> checkItemList) {		this.connection= this.createConnection();		try{			String sql = "delete from check_item";			PreparedStatement stmt = this.connection.prepareStatement(sql);			stmt.executeUpdate();			for(CheckItem ci  : checkItemList){				sql = "insert into check_item (check_item ) values(?)";				stmt = this.connection.prepareStatement(sql);				stmt.setString(1, ci.getCheckItem());				stmt.executeUpdate();			}			stmt.close();			this.closeConnection(connection);		}catch(SQLException e){			this.closeConnection(connection);			e.printStackTrace();		} finally {		}		this.closeConnection(connection);	}	public void setExerciseRemoved(int exerciseId, Boolean isRemoved){		this.connection= this.createConnection();		String sql = "update exercise set is_removed = ? where exercise_id = ?";		PreparedStatement stmt;		try {			stmt = this.connection.prepareStatement(sql);			stmt.setBoolean(1, isRemoved);			stmt.setInt(2, exerciseId);			stmt.executeUpdate();			stmt.close();			this.closeConnection(connection);		} catch (SQLException e) {			// TODO 自動生成された catch ブロック			e.printStackTrace();			this.closeConnection(connection);		} finally{			this.closeConnection(connection);		}		return;	}	public void prepareExperimentalData(String userId) {	}
}

